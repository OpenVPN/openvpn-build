<?xml version="1.0" encoding="utf-8"?>
<!--
  openvpn-build â€” OpenVPN packaging

  Copyright (C) 2018-2020 Simon Rozman <simon@rozman.si>
  Copyright (C) 2020-2020 Lev Stipakov <lev@openvpn.net>

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License version 2
  as published by the Free Software Foundation.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License along
  with this program; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-->
<package>
	<job id="build">
		<runtime>
			<description>Packages OpenVPN for Windows.</description>
			<unnamed name="&lt;command&gt;" helpstring="Command to execute (default: &quot;all&quot;)"/>
			<named name="a" helpstring="Builds all targets even if output is newer than input" type="simple"/>
			<example>
Commands:
all  	Builds MSI packages and EXE installer
msi  	Builds MSI packages only
exe  	Builds EXE installer only
clean	Cleans intermediate and output files</example>
		</runtime>
		<reference object="ADODB.Stream"/>
		<reference object="Scripting.FileSystemObject"/>
		<reference object="WinHttp.WinHttpRequest.5.1"/>
		<reference object="WScript.Shell"/>
		<script language="JScript" src="script/Builder.js"/>
		<script language="JScript" src="script/M4Parser.js"/>
		<script language="JScript" src="script/String.js"/>
		<script language="JScript"><![CDATA[
            // Get package info.
            var ver = new M4Parser();
            ver.parse("version.m4");

            // Folders
            var
                rootPath       = "..",
                depsPath       = BuildPath("..", "src"),
                buildPath      = "tmp",
                sourcePath     = "sources",
                easyRSAPath    = BuildPath(buildPath, "easyrsa-" + ver.define.EASYRSA_VERSION),
                outputPath     = "image";

            // Platform specific info
            var platforms = ["x86", "amd64", "arm64"];
            var platformInfo = {
                "x86": {
                    "buildPath": BuildPath(buildPath, "x86"),
                    "openVPNBinPath": BuildPath(depsPath, "openvpn", "out", "build", "win-x86-release", "Release"),
                    "openVPNMsiCAPath": BuildPath(depsPath, "openvpn", "out", "build", "win-x86-release", "src", "openvpnmsica", "Release"),
                    "openVPNServPath": BuildPath(depsPath, "openvpn", "out", "build", "win-x86-release", "src", "openvpnserv", "Release"),
                    "openVPNTapCtlPath": BuildPath(depsPath, "openvpn", "out", "build", "win-x86-release", "src", "tapctl", "Release"),
                    "openVPNDocPath": BuildPath(depsPath, "openvpn", "out", "build", "win-x86-release", "doc"),
                    "openVPNGuiPath": BuildPath(depsPath, "openvpn-gui"),
                    "openVPNGuiBinPath": BuildPath(depsPath, "openvpn-gui", "out", "build", "x86", "Release"),
                    "openSSLToolsPath": BuildPath(depsPath, "openvpn", "out", "build", "win-x86-release", "vcpkg_installed", "x86-windows-ovpn", "tools", "openssl"),
                    "openSSLBinPath": BuildPath(depsPath, "openvpn", "out", "build", "win-x86-release", "vcpkg_installed", "x86-windows-ovpn", "bin"),
                    "programFilesPath": "ProgramFilesFolder",
                    "openSSLPlat": "",
                    "tapWinPlat": "i386",
                    "wixPlat": "x86",
                    "wixLinkDepenencies": [],
                    "ovpnDcoPath": BuildPath(buildPath, "x86", "ovpn-dco")
                },

                "amd64": {
                    "buildPath": BuildPath(buildPath, "amd64"),
                    "openVPNBinPath": BuildPath(depsPath, "openvpn", "out", "build", "win-amd64-release", "Release"),
                    "openVPNMsiCAPath": BuildPath(depsPath, "openvpn", "out", "build", "win-amd64-release", "src", "openvpnmsica", "Release"),
                    "openVPNServPath": BuildPath(depsPath, "openvpn", "out", "build", "win-amd64-release", "src", "openvpnserv", "Release"),
                    "openVPNTapCtlPath": BuildPath(depsPath, "openvpn", "out", "build", "win-amd64-release", "src", "tapctl", "Release"),
                    "openVPNDocPath": BuildPath(depsPath, "openvpn", "out", "build", "win-amd64-release", "doc"),
                    "openVPNGuiPath": BuildPath(depsPath, "openvpn-gui"),
                    "openVPNGuiBinPath": BuildPath(depsPath, "openvpn-gui", "out", "build", "x64", "Release"),
                    "openSSLToolsPath": BuildPath(depsPath, "openvpn", "out", "build", "win-amd64-release", "vcpkg_installed", "x64-windows-ovpn", "tools", "openssl"),
                    "openSSLBinPath": BuildPath(depsPath, "openvpn", "out", "build", "win-amd64-release", "vcpkg_installed", "x64-windows-ovpn", "bin"),
                    "programFilesPath": "ProgramFiles64Folder",
                    "openSSLPlat": "-x64",
                    "tapWinPlat": "amd64",
                    "wixPlat": "x64",
                    "wixLinkDepenencies": [],
                    "ovpnDcoPath": BuildPath(buildPath, "amd64", "ovpn-dco")
                },

                "arm64": {
                    "buildPath": BuildPath(buildPath, "arm64"),
                    "openVPNBinPath": BuildPath(depsPath, "openvpn", "out", "build", "win-arm64-release", "Release"),
                    "openVPNMsiCAPath": BuildPath(depsPath, "openvpn", "out", "build", "win-arm64-release", "src", "openvpnmsica", "Release"),
                    "openVPNServPath": BuildPath(depsPath, "openvpn", "out", "build", "win-arm64-release", "src", "openvpnserv", "Release"),
                    "openVPNTapCtlPath": BuildPath(depsPath, "openvpn", "out", "build", "win-arm64-release", "src", "tapctl", "Release"),
                    "openVPNDocPath": BuildPath(depsPath, "openvpn", "out", "build", "win-arm64-release", "doc"),
                    "openVPNGuiPath": BuildPath(depsPath, "openvpn-gui"),
                    "openVPNGuiBinPath": BuildPath(depsPath, "openvpn-gui", "out", "build", "arm64", "Release"),
                    "openSSLToolsPath": BuildPath(depsPath, "openvpn", "out", "build", "win-arm64-release", "vcpkg_installed", "arm64-windows-ovpn", "tools", "openssl"),
                    "openSSLBinPath": BuildPath(depsPath, "openvpn", "out", "build", "win-arm64-release", "vcpkg_installed", "arm64-windows-ovpn", "bin"),
                    "programFilesPath": "ProgramFiles64Folder",
                    "openSSLPlat": "-arm64",
                    "tapWinPlat": "arm64",
                    "wixPlat": "arm64",
                    "wixLinkDepenencies": [],
                    "ovpnDcoPath": BuildPath(buildPath, "arm64", "ovpn-dco")
                }
            }

            // Create and configure the builder.
            var b = new Builder();
            if (WScript.Arguments.Named.Exists("a"))
                b.force = true;

            var cmd = WScript.Arguments.Unnamed.Length > 0 ? WScript.Arguments.Unnamed(0).toLowerCase() : "all";
            var msiFiles = [];

            // Add MSI building rules for "all"/"clean" and "msi" targets only.
            // This prevents accidental building of already signed MSI packages
            // with "exe" target.
            switch (cmd) {
                case "all":
                case "clean":
                case "msi":
                case "msi-x86":
                case "msi-amd64":
                case "msi-arm64":
                    var env = WScript.CreateObject("WScript.Shell").Environment("Process");

                    // Downloading openvpnserv2.exe
                    b.pushRule(new DownloadBuildRule(
                        BuildPath(buildPath, "openvpnserv2.exe"),
                        ver.define.OPENVPNSERV2_URL,
                        ["version.m4"]));

                    // Downloading and extracting Easy RSA
                    b.pushRule(new DownloadBuildRule(
                        BuildPath(sourcePath, "easyrsa-" + ver.define.EASYRSA_VERSION + ".zip"),
                        "https://github.com/OpenVPN/easy-rsa/releases/download/v" + ver.define.EASYRSA_VERSION + "/EasyRSA-" + ver.define.EASYRSA_VERSION + "-win64.zip",
                        ["version.m4"]));
                    b.pushRule(new ExtractBuildRule(
                        [
                            BuildPath(easyRSAPath, "easyrsa")
                        ],
                        buildPath, // "easyrsa-" + ver.define.EASYRSA_VERSION folder is provided by .zip file.
                        BuildPath(buildPath, "easyrsa-" + ver.define.EASYRSA_VERSION + ".timestamp"),
                        BuildPath(sourcePath, "easyrsa-" + ver.define.EASYRSA_VERSION + ".zip"),
                        []));
                    b.pushRule(new CreateFileBuildRule(
                        BuildPath(easyRSAPath, "EasyRSA-Start.bat"),
                        [
                            "@echo OFF",
                            "rem Automatically set PATH to openssl.exe",
                            "FOR /F \"tokens=2*\" %%a IN ('REG QUERY \"HKEY_LOCAL_MACHINE\\SOFTWARE\\OpenVPN\" /v bin_dir') DO set \"PATH=%PATH%;%%b\"",
                            "bin\\sh.exe bin\\easyrsa-shell-init.sh %*"
                        ],
                        ["version.m4"]));

                    // Add platform-specific build rules.
                    for (i in platforms) {
                        var
                            plat = platforms[i],
                            p = platformInfo[plat];

                        // Downloading TAP-Windows6
                        b.pushRule(new DownloadBuildRule(
                            BuildPath(p.buildPath, "tap-windows6.msm"),
                            "https://github.com/OpenVPN/tap-windows6/releases/download/" + ver.define.PRODUCT_TAP_WIN_VERSION + "/tap-windows-" + ver.define.PRODUCT_TAP_WIN_VERSION + "-" + ver.define.PRODUCT_TAP_WIN_INSTALLER_VERSION + "-" + p.tapWinPlat + ".msm",
                            ["version.m4"]));

                        // Downloading Wintun
                        b.pushRule(new DownloadBuildRule(
                            BuildPath(p.buildPath, "wintun.msm"),
                            ver.define["PRODUCT_WINTUN_URL_" + plat],
                            ["version.m4"]));

                        // Downloading ovpn-dco
                        b.pushRule(new DownloadBuildRule(
                            BuildPath(p.buildPath, "ovpn-dco.msm"),
                            "https://github.com/OpenVPN/ovpn-dco-win/releases/download/" + ver.define.PRODUCT_OVPN_DCO_VERSION + "/ovpn-dco-" + plat + ".msm",
                            ["version.m4"]));

                        // WiX compiler flags
                        var wixCompilerFlags = [
                            "-ext WixNetFxExtension",
                            "-arch \"" + _CMD(p.wixPlat) + "\"",
                            "-dPRODUCT_PUBLISHER=\""            + _CMD(ver.define["PRODUCT_PUBLISHER"           ]) + "\"",
                            "-dPRODUCT_NAME=\""                 + _CMD(ver.define["PRODUCT_NAME"                ]) + "\"",
                            "-dPRODUCT_VERSION=\""              + _CMD(ver.define["PRODUCT_VERSION"             ]) + "\"",
                            "-dPACKAGE_VERSION=\""              + _CMD(ver.define["PACKAGE_VERSION"             ]) + "\"",
                            "-dPRODUCT_TAP_WIN_NAME=\""         + _CMD(ver.define["PRODUCT_TAP_WIN_NAME"        ]) + "\"",
                            "-dPRODUCT_TAP_WIN_COMPONENT_ID=\"" + _CMD(ver.define["PRODUCT_TAP_WIN_COMPONENT_ID"]) + "\"",
                            "-dPRODUCT_PLATFORM=\""             + plat                                             + "\"",
                            "-dPRODUCT_CODE=\""                 + _CMD(ver.define["PRODUCT_CODE"                ]) + "\"",
                            "-dUPGRADE_CODE=\""                 + _CMD(ver.define["UPGRADE_CODE_" + plat        ]) + "\"",
                            "-dCONFIG_EXTENSION=\""             + _CMD(ver.define["CONFIG_EXTENSION"            ]) + "\"",
                            "-dPROGRAM_FILES_DIR=\""            + _CMD(p.programFilesPath                        ) + "\"",
                            "-dOPENSSL_PLAT=\""                 + _CMD(p.openSSLPlat                             ) + "\""];

                        // WiX compiling
                        b.pushRule(new WiXCompileBuildRule(
                            BuildPath(p.buildPath, "gui.wixobj"),
                            "gui.wxs",
                            ["version.m4"],
                            wixCompilerFlags));
                        b.pushRule(new WiXCompileBuildRule(
                            BuildPath(p.buildPath, "msi.wixobj"),
                            "msi.wxs",
                            ["version.m4"],
                            wixCompilerFlags));

                        // Text file generation
                        b.pushRule(new ConvertTextBuildRule(
                            BuildPath(p.buildPath, "license.txt"), "utf-8", adCRLF,
                            [
                                BuildPath(depsPath, "openvpn", "COPYING"),
                                BuildPath(depsPath, "openvpn", "COPYRIGHT.GPL")
                            ], "utf-8", adCRLF,
                            []));
                        b.pushRule(new ConvertTextBuildRule(
                            BuildPath(p.buildPath, "client.ovpn"), "utf-8", adCRLF,
                            [BuildPath(depsPath, "openvpn", "sample", "sample-config-files", "client.conf")], "utf-8", adCRLF,
                            []));
                        b.pushRule(new ConvertTextBuildRule(
                            BuildPath(p.buildPath, "server.ovpn"), "utf-8", adCRLF,
                            [BuildPath(depsPath, "openvpn", "sample", "sample-config-files", "server.conf")], "utf-8", adCRLF,
                            []));
                        // WiX linker flags
                        var wixLinkerFlags = [
                            "-spdb",
                            "-ext WixNetFxExtension",
                            "-b build=\""         + _CMD(buildPath    ) + "\"",
                            "-b openvpndoc=\""    + _CMD(p.openVPNDocPath) + "\"",
                            "-b openvpnbin=\""    + _CMD(p.openVPNBinPath) + "\"",
                            "-b openvpnmsica=\""  + _CMD(p.openVPNMsiCAPath) + "\"",
                            "-b openvpnserv=\""   + _CMD(p.openVPNServPath) + "\"",
                            "-b openvpntapctl=\"" + _CMD(p.openVPNTapCtlPath) + "\"",
                            "-b openvpngui=\""    + _CMD(p.openVPNGuiPath) + "\"",
                            "-b openvpnguibin=\"" + _CMD(p.openVPNGuiBinPath) + "\"",
                            "-b openssltools=\""  + _CMD(p.openSSLToolsPath) + "\"",
                            "-b opensslbin=\""    + _CMD(p.openSSLBinPath) + "\"",
                            "-b easyrsa=\""       + _CMD(easyRSAPath  ) + "\"",
                            "-b openvpnserv2=\""  + _CMD(buildPath    ) + "\"",
                            "-b ovpndco=\""       + _CMD(p.ovpnDcoPath) + "\""
                        ];

                        // WiX linking
                        var msiFile = BuildPath(outputPath, ver.define.PRODUCT_NAME + "-" + ver.define.PACKAGE_VERSION + "-" + plat + ".msi");
                        msiFiles.push(msiFile);
                        b.pushRule(new WiXLinkBuildRule(
                            msiFile,
                            [
                                BuildPath(p.buildPath, "gui.wixobj"),
                                BuildPath(p.buildPath, "msi.wixobj")
                            ],
                            [
                                BuildPath("artwork", "info.ico"),
                                BuildPath("artwork", "folder_new.ico"),
                                BuildPath("artwork", "folder_up.ico"),
                                BuildPath("artwork", "header.bmp"),
                                BuildPath("artwork", "openvpn.ico"),
                                BuildPath("artwork", "ovpn.ico"),
                                BuildPath("artwork", "tapctl_create.ico"),
                                BuildPath("artwork", "url.ico"),
                                BuildPath("artwork", "warning.ico"),
                                BuildPath("doc", "LicenseAgreement.rtf"),
                                BuildPath("script", "ActiveSetupCA.js"),
                                BuildPath("script", "PlapReg.js"),
                                BuildPath("script", "Service.js"),
                                BuildPath("script", "ACL.js"),
                                BuildPath(p.buildPath, "license.txt"),
                                BuildPath(p.buildPath, "tap-windows6.msm"),
                                BuildPath(p.buildPath, "wintun.msm"),
                                BuildPath(p.buildPath, "ovpn-dco.msm"),
                                BuildPath(p.openVPNBinPath, "libcrypto-3" + p.openSSLPlat + ".dll"),
                                BuildPath(p.openVPNMsiCAPath, "openvpnmsica.dll"),
                                BuildPath(p.openVPNBinPath, "libpkcs11-helper-1.dll"),
                                BuildPath(p.openVPNBinPath, "libssl-3" + p.openSSLPlat + ".dll"),
                                BuildPath(p.openSSLToolsPath, "openssl.exe"),
                                BuildPath(p.openSSLBinPath, "legacy.dll"),
                                BuildPath(p.openVPNBinPath, "openvpn.exe"),
                                BuildPath(p.openVPNGuiBinPath, "openvpn-gui.exe"),
                                BuildPath(p.openVPNServPath, "openvpnserv.exe"),
                                BuildPath(p.openVPNTapCtlPath, "tapctl.exe"),
                                BuildPath("vcredist", p.wixPlat, "vcruntime140.dll"),
                                BuildPath(buildPath, "openvpnserv2.exe"),
                                BuildPath(buildPath, "README-config.txt"),
                                BuildPath(buildPath, "README-config-auto.txt"),
                                BuildPath(buildPath, "INSTALL-win32.txt"),
                                BuildPath(p.openVPNDocPath, "openvpn.8.html"),
                                BuildPath("bookmarks", "howto.url"),
                                BuildPath("bookmarks", "support.url"),
                                BuildPath("bookmarks", "website.url"),
                                BuildPath("bookmarks", "wiki.url"),
                                BuildPath(easyRSAPath, "easyrsa"),
                                BuildPath(easyRSAPath, "EasyRSA-Start.bat"),
                                BuildPath(buildPath, "README-log.txt"),
                                BuildPath(p.buildPath, "client.ovpn"),
                                BuildPath(p.buildPath, "server.ovpn")
                            ].concat(p.wixLinkDepenencies),
                            wixLinkerFlags));
                    }

                    // Readme files generation
                    b.pushRule(new PreprocessBuildRule(
                        BuildPath(buildPath, "INSTALL-win32.txt"), "utf-8", adCRLF,
                        [BuildPath("doc", "doc", "INSTALL-win32.txt.in")], "utf-8", adLF,
                        ver,
                        ["version.m4"]));
                    b.pushRule(new PreprocessBuildRule(
                        BuildPath(buildPath, "README-config.txt"), "utf-8", adCRLF,
                        [BuildPath("doc", "config", "README.txt.in")], "utf-8", adLF,
                        ver,
                        ["version.m4"]));
                    b.pushRule(new PreprocessBuildRule(
                        BuildPath(buildPath, "README-config-auto.txt"), "utf-8", adCRLF,
                        [BuildPath("doc", "config-auto", "README.txt.in")], "utf-8", adLF,
                        ver,
                        ["version.m4"]));
                    b.pushRule(new PreprocessBuildRule(
                        BuildPath(buildPath, "README-log.txt"), "utf-8", adCRLF,
                        [BuildPath("doc", "log", "README.txt.in")], "utf-8", adLF,
                        ver,
                        ["version.m4"]));
                    break;

                case "exe":
                    for (i in platforms)
                        msiFiles.push(BuildPath(outputPath, ver.define.PRODUCT_NAME + "-" + ver.define.PACKAGE_VERSION + "-" + platforms[i] + ".msi"));
                    break;
            }

            // Add rules for 7-Zip SFX creation.
            switch (cmd) {
                case "all": case "clean":
                case "exe":
                    b.pushRule(new PreprocessBuildRule(
                        BuildPath(buildPath, "boot.wsf"), "utf-8", adCRLF,
                        ["boot.wsf.in"], "utf-8", adLF,
                        ver,
                        ["version.m4"]));
                    b.pushRule(new SevenZipSFXBuildRule(
                        BuildPath(outputPath, ver.define.PRODUCT_NAME + "-install-" + ver.define.PACKAGE_VERSION + ".exe"),
                        BuildPath("lzma1805", "bin", "7zSD-openvpn.sfx"),
                        ";!@Install@!UTF-8!\r\n" +
                        "Title=\"" + ver.define.PRODUCT_NAME + " " + ver.define.PACKAGE_VERSION + "\"\r\n" +
                        "ExecuteFile=\"wscript.exe\"\r\n" +
                        "ExecuteParameters=\"boot.wsf\"\r\n" +
                        ";!@InstallEnd@!\r\n",
                        [BuildPath(buildPath, "boot.wsf")].concat(msiFiles),
                        ["version.m4"]));
                    break;
            }

            var fso = new ActiveXObject("Scripting.FileSystemObject");
 
            // Finally, build the target.
            switch (cmd)
            {
                case "all":
                    b.build(BuildPath(outputPath, ver.define.PRODUCT_NAME + "-" + ver.define.PACKAGE_VERSION + "-x86.msi"    ));
                    b.build(BuildPath(outputPath, ver.define.PRODUCT_NAME + "-" + ver.define.PACKAGE_VERSION + "-amd64.msi"  ));
                    b.build(BuildPath(outputPath, ver.define.PRODUCT_NAME + "-" + ver.define.PACKAGE_VERSION + "-arm64.msi"  ));
                    b.build(BuildPath(outputPath, ver.define.PRODUCT_NAME + "-install-" + ver.define.PACKAGE_VERSION + ".exe"));
                    break;

                case "msi":
                    b.build(BuildPath(outputPath, ver.define.PRODUCT_NAME + "-" + ver.define.PACKAGE_VERSION + "-x86.msi"  ));
                    b.build(BuildPath(outputPath, ver.define.PRODUCT_NAME + "-" + ver.define.PACKAGE_VERSION + "-amd64.msi"));
                    b.build(BuildPath(outputPath, ver.define.PRODUCT_NAME + "-" + ver.define.PACKAGE_VERSION + "-arm64.msi"));
                    break;

                case "msi-x86":
                    b.build(BuildPath(outputPath, ver.define.PRODUCT_NAME + "-" + ver.define.PACKAGE_VERSION + "-x86.msi"  ));
                    break;

                case "msi-amd64":
                    b.build(BuildPath(outputPath, ver.define.PRODUCT_NAME + "-" + ver.define.PACKAGE_VERSION + "-amd64.msi"));
                    break;

                case "msi-arm64":
                    b.build(BuildPath(outputPath, ver.define.PRODUCT_NAME + "-" + ver.define.PACKAGE_VERSION + "-arm64.msi"));
                    break;

                case "exe":
                    b.build(BuildPath(outputPath, ver.define.PRODUCT_NAME + "-install-" + ver.define.PACKAGE_VERSION + ".exe"));
                    break;

                case "clean":
                    b.clean();
                    break;

                default:
                    WScript.Arguments.ShowUsage();
                    WScript.Quit(1);
            }

        ]]></script>
	</job>
</package>
